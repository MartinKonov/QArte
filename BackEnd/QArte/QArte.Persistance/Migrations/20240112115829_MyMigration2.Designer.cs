// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QArte.Persistance;

#nullable disable

namespace QArte.Persistance.Migrations
{
    [DbContext(typeof(QArteDBContext))]
    [Migration("20240112115829_MyMigration2")]
    partial class MyMigration2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.26")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("QArte.Persistance.PersistanceModels.BankAccount", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("BeneficiaryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IBAN")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PaymentMethodID")
                        .HasColumnType("int");

                    b.Property<string>("StripeInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("IBAN")
                        .IsUnique();

                    b.HasIndex(new[] { "PaymentMethodID" }, "IX_BankAccount_PaymentMethodID");

                    b.ToTable("BankAccounts");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            BeneficiaryName = "Stefan Dobrev",
                            IBAN = "BG42TTBB94008757957164",
                            PaymentMethodID = 2,
                            StripeInfo = "albala"
                        },
                        new
                        {
                            ID = 2,
                            BeneficiaryName = "Stiliqn Robinov",
                            IBAN = "BG71IORT80944884276632",
                            PaymentMethodID = 1,
                            StripeInfo = "stiliqnstraip"
                        },
                        new
                        {
                            ID = 3,
                            BeneficiaryName = "Jivodar Konov",
                            IBAN = "BG55IORT80944219848551",
                            PaymentMethodID = 1,
                            StripeInfo = "Lol"
                        });
                });

            modelBuilder.Entity("QArte.Persistance.PersistanceModels.BanTable", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("BanID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("BanID")
                        .IsUnique();

                    b.ToTable("BanTables");

                    b.HasData(
                        new
                        {
                            ID = -1,
                            BanID = 0
                        });
                });

            modelBuilder.Entity("QArte.Persistance.PersistanceModels.Fee", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ExchangeRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("InvoiceID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("InvoiceID");

                    b.ToTable("Fees");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Amount = 69.5m,
                            Currency = "EUR",
                            ExchangeRate = 4.3m
                        });
                });

            modelBuilder.Entity("QArte.Persistance.PersistanceModels.Gallery", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.HasKey("ID");

                    b.ToTable("Galleries");

                    b.HasData(
                        new
                        {
                            ID = 1
                        },
                        new
                        {
                            ID = 2
                        });
                });

            modelBuilder.Entity("QArte.Persistance.PersistanceModels.Invoice", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("BankAccountID")
                        .HasColumnType("int");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SettlementCycleID")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID");

                    b.HasIndex("SettlementCycleID")
                        .IsUnique();

                    b.HasIndex(new[] { "BankAccountID" }, "IX_Invoice_BankAccountID");

                    b.HasIndex(new[] { "SettlementCycleID" }, "IX_Invoice_SettlementCycleID");

                    b.ToTable("Invoices");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            BankAccountID = 1,
                            InvoiceDate = new DateTime(2024, 5, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            SettlementCycleID = 2,
                            TotalAmount = 69.69m
                        },
                        new
                        {
                            ID = 2,
                            BankAccountID = 2,
                            InvoiceDate = new DateTime(2025, 10, 26, 0, 0, 0, 0, DateTimeKind.Local),
                            SettlementCycleID = 1,
                            TotalAmount = 69.420m
                        });
                });

            modelBuilder.Entity("QArte.Persistance.PersistanceModels.Page", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GalleryID")
                        .HasColumnType("int");

                    b.Property<string>("QRLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<int?>("UserID1")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("GalleryID")
                        .IsUnique();

                    b.HasIndex("QRLink")
                        .IsUnique();

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.HasIndex("UserID1");

                    b.HasIndex(new[] { "GalleryID" }, "IX_Page_GalleryID");

                    b.ToTable("Pages");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Bio = "Kazvam se ema, obicham da pusha",
                            GalleryID = 1,
                            QRLink = "link/haha/dedaznam",
                            UserID = 4
                        },
                        new
                        {
                            ID = 2,
                            Bio = "Kazvam se ReyRey, obicham da qm qbalki",
                            GalleryID = 2,
                            QRLink = "link/haha/lol",
                            UserID = 5
                        });
                });

            modelBuilder.Entity("QArte.Persistance.PersistanceModels.PaymentMethod", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("PaymentMethods")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("PaymentMethods");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            PaymentMethods = 2
                        },
                        new
                        {
                            ID = 2,
                            PaymentMethods = 0
                        });
                });

            modelBuilder.Entity("QArte.Persistance.PersistanceModels.Picture", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("GalleryID")
                        .HasColumnType("int");

                    b.Property<string>("PictureURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex(new[] { "GalleryID" }, "IX_Picture_GalleryID");

                    b.ToTable("Pictures");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            GalleryID = 1,
                            PictureURL = "/Users/Martin.Kolev/Pictures/azisazis"
                        },
                        new
                        {
                            ID = 2,
                            GalleryID = 1,
                            PictureURL = "/Users/Martin.Kolev/Pictures/carAzis"
                        });
                });

            modelBuilder.Entity("QArte.Persistance.PersistanceModels.Role", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("ERole")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            ERole = 0
                        },
                        new
                        {
                            ID = 2,
                            ERole = 2
                        },
                        new
                        {
                            ID = 3,
                            ERole = 1
                        });
                });

            modelBuilder.Entity("QArte.Persistance.PersistanceModels.SettlementCycle", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime>("DatePeriod")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("SettlementCycles");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            DatePeriod = new DateTime(2024, 1, 12, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            ID = 2,
                            DatePeriod = new DateTime(2024, 1, 17, 0, 0, 0, 0, DateTimeKind.Local)
                        });
                });

            modelBuilder.Entity("QArte.Persistance.PersistanceModels.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int?>("BanID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("BankAccountID")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("ID");

                    b.HasIndex("BankAccountID")
                        .IsUnique();

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.HasIndex(new[] { "BanID" }, "IX_Artist_BanID")
                        .IsUnique();

                    b.HasIndex(new[] { "BankAccountID" }, "IX_Artist_BankAccountID");

                    b.HasIndex(new[] { "RoleID" }, "IX_Artist_RoleID");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            BanID = -1,
                            BankAccountID = 0,
                            Email = "ema.kuychukova@blankfactor.com",
                            FirstName = "Ema",
                            LastName = "Kuychukova",
                            Password = "kapachki",
                            PhoneNumber = "+35924492877",
                            RoleID = 2,
                            UserName = "SmokeEveryDay"
                        },
                        new
                        {
                            ID = 2,
                            BanID = -1,
                            BankAccountID = 0,
                            Email = "martin.kolev@blankfactor.com",
                            FirstName = "Martin",
                            LastName = "Kolev",
                            Password = "kapachki2",
                            PhoneNumber = "+35920768005",
                            RoleID = 2,
                            UserName = "ReyRey"
                        },
                        new
                        {
                            ID = 3,
                            BanID = -1,
                            BankAccountID = 0,
                            Email = "martin.konov@blankfactor.com",
                            FirstName = "Martin",
                            LastName = "Konov",
                            Password = "kapachki3",
                            PhoneNumber = "+35922649764",
                            RoleID = 2,
                            UserName = "ElbowBlock"
                        },
                        new
                        {
                            ID = 4,
                            BanID = -1,
                            BankAccountID = 2,
                            Email = "luben.kulishev@blankfactor.com",
                            FirstName = "Luben",
                            LastName = "Kulishev",
                            Password = "Narko123",
                            PhoneNumber = "+35924775508",
                            PictureUrl = "/Users/Martin.Kolev/Pictures/luben.png",
                            RoleID = 1,
                            UserName = "ObichamShumaNaParite"
                        },
                        new
                        {
                            ID = 5,
                            BanID = -1,
                            BankAccountID = 1,
                            Email = "vasil.hristov@blankfactor.com",
                            FirstName = "Vasil",
                            LastName = "Hristov",
                            Password = "PDA69",
                            PhoneNumber = "+35924775232",
                            PictureUrl = "/Users/Martin.Kolev/Pictures/vasil.png",
                            RoleID = 1,
                            UserName = "vasetoHulk"
                        });
                });

            modelBuilder.Entity("QArte.Persistance.PersistanceModels.BankAccount", b =>
                {
                    b.HasOne("QArte.Persistance.PersistanceModels.PaymentMethod", "PaymentMethod")
                        .WithMany("BankAccounts")
                        .HasForeignKey("PaymentMethodID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("QArte.Persistance.PersistanceModels.Fee", b =>
                {
                    b.HasOne("QArte.Persistance.PersistanceModels.Invoice", null)
                        .WithMany("Fees")
                        .HasForeignKey("InvoiceID");
                });

            modelBuilder.Entity("QArte.Persistance.PersistanceModels.Invoice", b =>
                {
                    b.HasOne("QArte.Persistance.PersistanceModels.BankAccount", "BankAccount")
                        .WithMany("Invoices")
                        .HasForeignKey("BankAccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QArte.Persistance.PersistanceModels.SettlementCycle", "SettlementCycle")
                        .WithOne()
                        .HasForeignKey("QArte.Persistance.PersistanceModels.Invoice", "SettlementCycleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BankAccount");

                    b.Navigation("SettlementCycle");
                });

            modelBuilder.Entity("QArte.Persistance.PersistanceModels.Page", b =>
                {
                    b.HasOne("QArte.Persistance.PersistanceModels.Gallery", "Gallery")
                        .WithOne()
                        .HasForeignKey("QArte.Persistance.PersistanceModels.Page", "GalleryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QArte.Persistance.PersistanceModels.User", "User")
                        .WithOne()
                        .HasForeignKey("QArte.Persistance.PersistanceModels.Page", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QArte.Persistance.PersistanceModels.User", null)
                        .WithMany("pages")
                        .HasForeignKey("UserID1");

                    b.Navigation("Gallery");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QArte.Persistance.PersistanceModels.Picture", b =>
                {
                    b.HasOne("QArte.Persistance.PersistanceModels.Gallery", "Gallery")
                        .WithMany("Pictures")
                        .HasForeignKey("GalleryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gallery");
                });

            modelBuilder.Entity("QArte.Persistance.PersistanceModels.User", b =>
                {
                    b.HasOne("QArte.Persistance.PersistanceModels.BanTable", "Ban")
                        .WithOne()
                        .HasForeignKey("QArte.Persistance.PersistanceModels.User", "BanID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QArte.Persistance.PersistanceModels.BankAccount", "BankAccount")
                        .WithOne()
                        .HasForeignKey("QArte.Persistance.PersistanceModels.User", "BankAccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QArte.Persistance.PersistanceModels.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Ban");

                    b.Navigation("BankAccount");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("QArte.Persistance.PersistanceModels.BankAccount", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("QArte.Persistance.PersistanceModels.Gallery", b =>
                {
                    b.Navigation("Pictures");
                });

            modelBuilder.Entity("QArte.Persistance.PersistanceModels.Invoice", b =>
                {
                    b.Navigation("Fees");
                });

            modelBuilder.Entity("QArte.Persistance.PersistanceModels.PaymentMethod", b =>
                {
                    b.Navigation("BankAccounts");
                });

            modelBuilder.Entity("QArte.Persistance.PersistanceModels.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("QArte.Persistance.PersistanceModels.User", b =>
                {
                    b.Navigation("pages");
                });
#pragma warning restore 612, 618
        }
    }
}
